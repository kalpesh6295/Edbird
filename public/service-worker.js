'use strict';var precacheConfig = [["/3rdpartylicenses.txt","eb0a4d3cef19b5bf631457acef4ec98a"],["/assets/images/logo _128.png","d227f36bb5185c149c8722e9a2f5cc0d"],["/assets/images/logo _192.png","4f39639d9b27fc5eee9edf10814b2366"],["/assets/images/logo _32.png","09b5d2b2b2b786114a520aed0c157385"],["/assets/images/logo _512.png","811dc0bd03d60d3f93c1023bf759124e"],["/assets/images/logo _72.png","e55ed7d2753df14741aabc30ff2eaf93"],["/assets/images/logo.svg","f6a9f3ad6db3f4528972c1cf33c4cf5c"],["/assets/webFonts/Engravers.ttf","2446be255f0c0dfa9f4dfb1edfbee8bd"],["/assets/webFonts/Engravers.woff","13675e33d528257b06aa2e301dd63611"],["/index.html","74c1ec5c1100ffdd4b0bb46c06963589"],["/inline.11245ee95b46e5798fe9.bundle.js","ce197d94adc82fb2c98dc8b635faeb97"],["/logo.ico","7a80f157ad423ec3329357caad7fbc23"],["/main.4246388c37e06994747a.bundle.js","e9ec05310b5fc8758e3263e1f5a06d64"],["/manifest.json","164e2a5a066163164cc323e3897aff4e"],["/polyfills.793385d06a57a3f4d2ef.bundle.js","bda800cb7b8dfcc8eff4c95ce9321652"],["/styles.4686e1f673c02b7dc759.bundle.css","4686e1f673c02b7dc759f5b48350f8a1"]]; var cacheName = 'sw-precache-v3-sw-precache-' + (self.registration ? self.registration.scope : '');var ignoreUrlParametersMatching = [/^utm_/];var addDirectoryIndex = function (originalUrl, index) { var url = new URL(originalUrl); if (url.pathname.slice(-1) === '/') { url.pathname += index; } return url.toString(); };var cleanResponse = function (originalResponse) { if (!originalResponse.redirected) { return Promise.resolve(originalResponse); } var bodyPromise = 'body' in originalResponse ? Promise.resolve(originalResponse.body) : originalResponse.blob();return bodyPromise.then(function(body) { return new Response(body, { headers: originalResponse.headers, status: originalResponse.status, statusText: originalResponse.statusText }); }); };var createCacheKey = function (originalUrl, paramName, paramValue, dontCacheBustUrlsMatching) { var url = new URL(originalUrl);if (!dontCacheBustUrlsMatching || !(url.pathname.match(dontCacheBustUrlsMatching))) { url.search += (url.search ? '&' : '') + encodeURIComponent(paramName) + '=' + encodeURIComponent(paramValue); }return url.toString(); };var isPathWhitelisted = function (whitelist, absoluteUrlString) { if (whitelist.length === 0) { return true; }var path = (new URL(absoluteUrlString)).pathname; return whitelist.some(function(whitelistedPathRegex) { return path.match(whitelistedPathRegex); }); };var stripIgnoredUrlParameters = function (originalUrl, ignoreUrlParametersMatching) { var url = new URL(originalUrl); url.hash = '';url.search = url.search.slice(1) .split('&') .map(function(kv) { return kv.split('='); }) .filter(function(kv) { return ignoreUrlParametersMatching.every(function(ignoredRegex) { return !ignoredRegex.test(kv[0]); }); }) .map(function(kv) { return kv.join('='); }) .join('&');return url.toString(); };var hashParamName = '_sw-precache'; var urlsToCacheKeys = new Map( precacheConfig.map(function(item) { var relativeUrl = item[0]; var hash = item[1]; var absoluteUrl = new URL(relativeUrl, self.location); var cacheKey = createCacheKey(absoluteUrl, hashParamName, hash, false); return [absoluteUrl.toString(), cacheKey]; }) );function setOfCachedUrls(cache) { return cache.keys().then(function(requests) { return requests.map(function(request) { return request.url; }); }).then(function(urls) { return new Set(urls); }); }self.addEventListener('install', function(event) { event.waitUntil( caches.open(cacheName).then(function(cache) { return setOfCachedUrls(cache).then(function(cachedUrls) { return Promise.all( Array.from(urlsToCacheKeys.values()).map(function(cacheKey) { if (!cachedUrls.has(cacheKey)) { var request = new Request(cacheKey, {credentials: 'same-origin'}); return fetch(request).then(function(response) { if (!response.ok) { throw new Error('Request for ' + cacheKey + ' returned a ' + 'response with status ' + response.status); }return cleanResponse(response).then(function(responseToCache) { return cache.put(cacheKey, responseToCache); }); }); } }) ); }); }).then(function() { return self.skipWaiting(); }) ); });self.addEventListener('activate', function(event) { var setOfExpectedUrls = new Set(urlsToCacheKeys.values());event.waitUntil( caches.open(cacheName).then(function(cache) { return cache.keys().then(function(existingRequests) { return Promise.all( existingRequests.map(function(existingRequest) { if (!setOfExpectedUrls.has(existingRequest.url)) { return cache.delete(existingRequest); } }) ); }); }).then(function() { return self.clients.claim(); }) ); });self.addEventListener('fetch', function(event) { if (event.request.method === 'GET') { var shouldRespond; var url = stripIgnoredUrlParameters(event.request.url, ignoreUrlParametersMatching); shouldRespond = urlsToCacheKeys.has(url);var directoryIndex = 'index.html'; if (!shouldRespond && directoryIndex) { url = addDirectoryIndex(url, directoryIndex); shouldRespond = urlsToCacheKeys.has(url); }var navigateFallback = '/index.html'; if (!shouldRespond && navigateFallback && (event.request.mode === 'navigate') && isPathWhitelisted(["^(?!\/__)"], event.request.url)) { url = new URL(navigateFallback, self.location).toString(); shouldRespond = urlsToCacheKeys.has(url); }if (shouldRespond) { event.respondWith( caches.open(cacheName).then(function(cache) { return cache.match(urlsToCacheKeys.get(url)).then(function(response) { if (response) { return response; } throw Error('The cached response that was expected is missing.'); }); }).catch(function(e) { console.warn('Could not serve response for "%s" from cache: %O', event.request.url, e); return fetch(event.request); }) ); } } });